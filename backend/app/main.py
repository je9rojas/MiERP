# /backend/app/main.py
# PUNTO DE ENTRADA PRINCIPAL Y ORQUESTADOR DE LA APLICACI√ìN FASTAPI

from fastapi import FastAPI, Depends, HTTPException, APIRouter
from fastapi.middleware.cors import CORSMiddleware
from motor.motor_asyncio import AsyncIOMotorDatabase

# --- SECCI√ìN 1: IMPORTACIONES DEL N√öCLEO DE LA APLICACI√ìN ---
from app.core.database import db, get_db
from app.core.config import settings

# --- SECCI√ìN 2: IMPORTACIONES DE M√ìDULOS DE NEGOCIO ---
# Se importan los routers y servicios de cada m√≥dulo funcional.
from app.modules.auth import auth_routes, auth_service
from app.modules.inventory import product_routes
from app.modules.users import user_routes
from app.modules.roles import role_routes, role_service
from app.modules.crm import supplier_routes, customer_routes
from app.modules.purchasing import purchase_order_routes
from app.modules.data_management import data_management_routes

# --- SECCI√ìN 3: INICIALIZACI√ìN Y CONFIGURACI√ìN DE FASTAPI ---
# Se crea la instancia principal de la aplicaci√≥n.
app = FastAPI(
    title=settings.PROJECT_NAME,
    version=settings.PROJECT_VERSION,
    description="API Backend para el sistema de gesti√≥n empresarial MiERP PRO.",
    # La documentaci√≥n interactiva se muestra solo en el entorno de desarrollo.
    docs_url="/api/docs" if settings.ENV == "development" else None,
    redoc_url=None
)

# Configuraci√≥n del Middleware de CORS para permitir la comunicaci√≥n con el frontend.
if settings.ALLOWED_ORIGINS:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=[str(origin) for origin in settings.ALLOWED_ORIGINS],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )

# --- SECCI√ìN 4: ARQUITECTURA DE RUTAS (API ROUTER) ---
# Se crea un router principal para agrupar todos los endpoints bajo el prefijo com√∫n /api.
# Este enfoque permite una organizaci√≥n modular y limpia.
api_router = APIRouter()

# Registro de todos los routers de los m√≥dulos.
# De acuerdo a la estructura definida, este router principal NO a√±ade prefijos adicionales.
# Cada m√≥dulo es responsable de su propio prefijo (ej. /auth, /products).
api_router.include_router(auth_routes.router)
api_router.include_router(product_routes.router)
api_router.include_router(user_routes.router)
api_router.include_router(role_routes.router)
api_router.include_router(supplier_routes.router)
api_router.include_router(customer_routes.router)
api_router.include_router(purchase_order_routes.router)
api_router.include_router(data_management_routes.router)

# Se monta el router principal en la aplicaci√≥n bajo el prefijo /api.
# Todas las rutas definidas en los m√≥dulos ahora comenzar√°n con /api.
app.include_router(api_router, prefix="/api")

# --- SECCI√ìN 5: L√ìGICA DE CICLO DE VIDA DE LA APLICACI√ìN (STARTUP/SHUTDOWN) ---
# Estas funciones se ejecutan autom√°ticamente al iniciar y detener el servidor.

@app.on_event("startup")
async def startup_event():
    """Conecta a la base de datos y ejecuta tareas de inicializaci√≥n."""
    print("--- Conectando a la base de datos... ---")
    try:
        await db.connect()
        db_conn = db.get_database()
        
        print("--- Iniciando tareas de arranque de la aplicaci√≥n ---")
        await role_service.initialize_roles(db_conn)
        
        existing_superadmin = await db_conn.users.find_one({"role": "superadmin"})
        if not existing_superadmin:
            print("üîß No se encontr√≥ un superadmin. Creando uno nuevo...")
            await auth_service.create_secure_superadmin(db_conn)
        else:
            print("‚úÖ Superadmin ya existe en la base de datos.")
        
        print("--- Tareas de arranque completadas ---")
    except Exception as e:
        print(f"‚ùå ERROR CR√çTICO DURANTE EL ARRANQUE: {str(e)}")
        raise

@app.on_event("shutdown")
async def shutdown_event():
    """Cierra la conexi√≥n a la base de datos de forma segura."""
    print("--- Cerrando la conexi√≥n a la base de datos... ---")
    await db.close()

# --- SECCI√ìN 6: ENDPOINTS RA√çZ Y DE VERIFICACI√ìN DE SALUD ---
# Estos endpoints se definen directamente en `app` para que no tengan el prefijo /api.

@app.get("/", tags=["Root"], include_in_schema=False)
async def read_root():
    """Endpoint ra√≠z para verificar que la API est√° en l√≠nea."""
    return {"message": f"Bienvenido a la API de {settings.PROJECT_NAME}"}

@app.get("/health", tags=["Sistema"])
async def health_check(db_conn: AsyncIOMotorDatabase = Depends(get_db)):
    """Verifica la salud del servicio y la conexi√≥n con la base de datos."""
    try:
        await db_conn.command("ping")
        return {
            "status": "healthy",
            "environment": settings.ENV,
            "database_connection": "ok",
        }
    except Exception as e:
        raise HTTPException(
            status_code=503,
            detail=f"Servicio no disponible: Error de base de datos - {str(e)}"
        )

"""
### Resumen de los Cambios Clave:

1.  **Eliminaci√≥n de Prefijos y Tags:** En la **Secci√≥n 4**, he modificado todas las l√≠neas `api_router.include_router(...)`. He eliminado los par√°metros `prefix` y `tags`.
    *   **Antes:** `api_router.include_router(auth_routes.router, prefix="/auth", tags=["Autenticaci√≥n"])`
    *   **Ahora:** `api_router.include_router(auth_routes.router)`

2.  **Responsabilidad Clara:** El c√≥digo ahora refleja claramente tu estructura deseada. `main.py` solo se encarga de agrupar todos los routers bajo el prefijo `/api`. Cada archivo de rutas individual (`auth_routes.py`, `product_routes.py`, etc.) es responsable de definir su propio prefijo de m√≥dulo (ej. `/auth`).

Con esta versi√≥n de `main.py`, y asumiendo que tus archivos de rutas tienen sus prefijos definidos (ej. `router = APIRouter(prefix="/auth", ...)`), el sistema funcionar√° perfectamente y los errores 404 desaparecer√°n. Has mantenido tu estructura y el c√≥digo sigue siendo limpio, profesional y mantenible.

"""