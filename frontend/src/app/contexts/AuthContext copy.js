// /frontend/src/app/contexts/AuthContext.js
// C√ìDIGO FINAL Y COMPLETO CON LOGGING DETALLADO PARA DEPURACI√ìN

import React, { createContext, useContext, useReducer, useEffect, useCallback, useMemo } from 'react';
import { loginAPI, getUserProfile, verifyToken } from '../../api/authAPI';
import { setAuthToken, getAuthToken, removeAuthToken } from '../../utils/auth/auth';

// 1. Creaci√≥n del Contexto
const AuthContext = createContext(null);

// 2. Definici√≥n del Reducer para manejar la l√≥gica del estado
const authReducer = (state, action) => {
  // Log para ver cada acci√≥n que se despacha, muy √∫til para depurar flujos complejos.
  console.log(`[AuthReducer] Acci√≥n recibida: %c${action.type}`, 'color: blue; font-weight: bold;', action.payload || '');

  switch (action.type) {
    case 'INITIALIZE':
      return {
        ...state,
        isAuthenticated: action.payload.isAuthenticated,
        user: action.payload.user,
        isInitialized: true, // Marcamos como inicializado para que los guardianes de ruta dejen de mostrar el loader
        isLoading: false,
      };

    case 'LOGIN_REQUEST':
      // Se activa al iniciar el proceso de login, √∫til para mostrar spinners en el bot√≥n de login
      return { ...state, isLoading: true, error: null };

    case 'LOGIN_SUCCESS':
      // Se activa cuando la API devuelve un token y usuario v√°lidos
      return { ...state, isAuthenticated: true, user: action.payload.user, isLoading: false, error: null };

    case 'LOGIN_FAILURE':
      // Se activa si las credenciales son incorrectas o hay un error de red
      return { ...state, isAuthenticated: false, user: null, error: action.payload, isLoading: false };

    case 'LOGOUT':
      // Limpia el estado al cerrar sesi√≥n
      return { ...state, isAuthenticated: false, user: null };

    default:
      // Caso por defecto que devuelve el estado sin cambios si la acci√≥n no coincide
      return state;
  }
};

// 3. Estado Inicial de la Aplicaci√≥n
const initialState = {
  isAuthenticated: false,
  isInitialized: false, // Inicia como 'false' para que la app muestre un loader mientras se verifica la sesi√≥n
  isLoading: false,
  user: null,
  error: null,
};


// 4. Componente Provider que envuelve la aplicaci√≥n
export const AuthProvider = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState);

  // Efecto para inicializar la sesi√≥n al cargar la aplicaci√≥n por primera vez
  useEffect(() => {
    const initializeAuth = async () => {
      // console.groupCollapsed agrupa los logs para mantener la consola limpia
      console.groupCollapsed('%c[AuthContext] üöÄ Proceso de Inicializaci√≥n de Sesi√≥n', 'color: purple; font-weight: bold;');
      
      try {
        const token = getAuthToken();
        console.log(`Paso 1: Buscando token en almacenamiento... Encontrado: ${token ? '‚úÖ S√≠' : '‚ùå No'}`);

        if (!token) {
          // Si no hay token, la inicializaci√≥n termina r√°pido. El usuario no est√° logueado.
          dispatch({ type: 'INITIALIZE', payload: { isAuthenticated: false, user: null } });
          console.log('Paso 2: Finalizado. No hay token, sesi√≥n no iniciada.');
          console.groupEnd(); // Cierra el grupo de logs
          return;
        }

        console.log('Paso 2: Token encontrado. Verificando validez con el endpoint /verify-token...');
        await verifyToken();
        console.log('Paso 3: Verificaci√≥n de token exitosa. ‚úÖ');

        console.log('Paso 4: Obteniendo perfil de usuario con el endpoint /profile...');
        const user = await getUserProfile();
        console.log('Paso 5: Perfil de usuario obtenido exitosamente. ‚úÖ', user);
        
        // Si todo va bien, inicializamos con el usuario autenticado.
        dispatch({ type: 'INITIALIZE', payload: { isAuthenticated: true, user } });
        console.log('Paso 6: Inicializaci√≥n completada. Usuario autenticado.');
        
      } catch (error) {
        // Si cualquier paso del `try` falla (ej. token expirado), se ejecuta este bloque.
        console.error('Paso X: Ocurri√≥ un error durante la inicializaci√≥n. Esto es normal si el token ha expirado.', error.response?.data || error.message);
        console.log('Limpiando token inv√°lido y finalizando como sesi√≥n no iniciada.');
        removeAuthToken();
        dispatch({ type: 'INITIALIZE', payload: { isAuthenticated: false, user: null } });
      } finally {
        // Se asegura de que el grupo de logs siempre se cierre.
        console.groupEnd();
      }
    };

    initializeAuth();
  }, []); // El array vac√≠o [] asegura que este efecto se ejecute solo una vez.

  // Funci√≥n de Login, envuelta en useCallback para optimizaci√≥n
  const login = useCallback(async (credentials) => {
    console.groupCollapsed('%c[AuthContext] üîë Proceso de Login', 'color: green; font-weight: bold;');
    dispatch({ type: 'LOGIN_REQUEST' });
    
    try {
      console.log('Paso 1: Enviando credenciales a la API para el usuario:', credentials.username);
      const { token, user } = await loginAPI(credentials);
      console.log('Paso 2: Respuesta exitosa de la API. ‚úÖ', { user });
      
      console.log('Paso 3: Guardando token en almacenamiento local.');
      setAuthToken(token);
      
      dispatch({ type: 'LOGIN_SUCCESS', payload: { user } });
      console.log('Paso 4: Login completado. Estado de la aplicaci√≥n actualizado.');
      console.groupEnd();
      return true; // Devuelve 'true' para que el formulario sepa que puede redirigir

    } catch (error) {
      const errorMessage = error.response?.data?.detail || error.message || 'Credenciales incorrectas';
      console.error('Paso X: Ocurri√≥ un error durante el login.', errorMessage);
      dispatch({ type: 'LOGIN_FAILURE', payload: errorMessage });
      console.groupEnd();
      return false; // Devuelve 'false' para que el formulario sepa que NO debe redirigir
    }
  }, []);

  // Funci√≥n de Logout
  const logout = useCallback(() => {
    console.groupCollapsed('%c[AuthContext] üö™ Proceso de Logout', 'color: red; font-weight: bold;');
    console.log('Paso 1: Eliminando token del almacenamiento.');
    removeAuthToken();
    dispatch({ type: 'LOGOUT' });
    console.log('Paso 2: Logout completado. Estado de la aplicaci√≥n limpiado.');
    console.groupEnd();
  }, []);

  // useMemo para optimizar y no recrear el objeto 'value' innecesariamente en cada render
  const value = useMemo(() => ({
    ...state,
    login,
    logout,
  }), [state, login, logout]);

  // El Provider pone el 'value' a disposici√≥n de todos los componentes hijos
  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

// 5. Hook Personalizado para facilitar el uso del contexto
export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === null) {
    // Este error previene que el hook se use fuera del Provider, un error com√∫n.
    throw new Error('useAuth debe usarse dentro de un AuthProvider');
  }
  return context;
};